"use strict";(self.webpackChunk_funki_docs_frontend=self.webpackChunk_funki_docs_frontend||[]).push([[5427],{2556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tutorials/simple-nfts","title":"Simple NFTs","description":"","source":"@site/docs/tutorials/simple-nfts.md","sourceDirName":"tutorials","slug":"/tutorials/simple-nfts","permalink":"/docs/tutorials/simple-nfts","draft":false,"unlisted":false,"editUrl":"https://github.com/funkichain/docs/edit/main/packages/frontend/docs/tutorials/simple-nfts.md","tags":[],"version":"current","lastUpdatedAt":1734445511000,"frontMatter":{"title":"Simple NFTs","slug":"/tutorials/simple-nfts","order":5.7,"description":""},"sidebar":"docSidebar","previous":{"title":"Verify a Smart Contract on FunkiScan","permalink":"/docs/tutorials/verify-sm-on-funkichain"},"next":{"title":"Simple Fungible Tokens","permalink":"/docs/tutorials/simple-fungible-tokens"}}');var o=t(1085),r=t(1184);const s={title:"Simple NFTs",slug:"/tutorials/simple-nfts",order:5.7,description:""},a=void 0,c={},l=[{value:"Objectives",id:"objectives",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"ERC-721 Tokens",id:"erc-721-tokens",level:3},{value:"Vector Art",id:"vector-art",level:3},{value:"Building Smart Contract",id:"building-smart-contract",level:2},{value:"Offchain Metadata",id:"offchain-metadata",level:2},{value:"Onchain Metadata",id:"onchain-metadata",level:2},{value:"Onchain SVG Image",id:"onchain-svg-image",level:3},{value:"Generating a Random Color",id:"generating-a-random-color",level:3},{value:"Saving the Color to the NFT",id:"saving-the-color-to-the-nft",level:3},{value:"Completing the <code>tokenURI</code> Function",id:"completing-the-tokenuri-function",level:3},{value:"List of NFTs Owned",id:"list-of-nfts-owned",level:2},{value:"Testing",id:"testing",level:2},{value:"Deploy Contract",id:"deploy-contract",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["NFTs often utilize off-chain storage for metadata and images. Some employ immutable solutions like ",(0,o.jsx)(n.a,{href:"https://ipfs.tech/",children:"IPFS"}),", while others use traditional web hosting. The latter may allow contract owners to modify asset URLs, which, while useful for troubleshooting, introduces a trust requirement for users."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"objectives",children:"Objectives"}),"\n",(0,o.jsx)(n.p,{children:"By the end of this tutorial, you'll learn how to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Generate and return JSON metadata for ERC-721 tokens programmatically"}),"\n",(0,o.jsx)(n.li,{children:"Create unique SVG art deterministically within a smart contract"}),"\n",(0,o.jsx)(n.li,{children:"Produce deterministic, pseudorandom numbers"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"erc-721-tokens",children:"ERC-721 Tokens"}),"\n",(0,o.jsxs)(n.p,{children:["This tutorial assumes you can write, test, and deploy ",(0,o.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/4.x/erc721",children:"ERC-721"})," tokens using Solidity. If you need to brush up on these skills first, check out some introductory resources."]}),"\n",(0,o.jsx)(n.h3,{id:"vector-art",children:"Vector Art"}),"\n",(0,o.jsx)(n.p,{children:"You'll need familiarity with the SVG format and basic skills in editing and manipulating vector art. Don't have these? No worries\u2014grab an artsy friend and team up!!"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"building-smart-contract",children:"Building Smart Contract"}),"\n",(0,o.jsxs)(n.p,{children:["Begin by setting up an OpenZeppelin ERC-721 contract. You'll need to create a ",(0,o.jsx)(n.code,{children:"mintTo"})," function that accepts the recipient's address for the NFT."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport "hardhat/console.sol";\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\n\ncontract RandomColorNFT is ERC721 {\n    uint public counter;\n\n    constructor() ERC721("RandomColorNFT", "RCNFT") {}\n\n    function mintTo(address _to) public {\n        counter++;\n        _safeMint(_to, counter);\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["When using Smart Wallet, ",(0,o.jsx)(n.code,{children:"msg.sender"})," represents the user's custodial address\u2014the intended NFT recipient. However, this isn't always true with account abstraction. In some implementations, ",(0,o.jsx)(n.code,{children:"msg.sender"})," might be the smart contract address, even if the user signs in with an EOA. As a result, it's becoming standard practice to explicitly pass the desired NFT recipient's address."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"offchain-metadata",children:"Offchain Metadata"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#onchain-metadata"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"You can skip this section if you prefer to make your metadata fully on-chain."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This approach enables the smart contract to retrieve NFT metadata via an API server URL. You have the flexibility to deploy your metadata API on various platforms: IPFS, cloud storage, or your own servers."}),"\n",(0,o.jsxs)(n.p,{children:["For reference, sample API servers are available in both ",(0,o.jsx)(n.a,{href:"https://github.com/ProjectOpenSea/metadata-api-python",children:"Python"})," and ",(0,o.jsx)(n.a,{href:"https://github.com/ProjectOpenSea/metadata-api-nodejs",children:"NodeJS"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Essentially, we'll configure the tokenURI function to return a result like this:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image.png",src:t(294).A+"",width:"492",height:"213"})}),"\n",(0,o.jsx)(n.p,{children:"In this example, the API is a public endpoint that returns JSON data as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'// 20240823144509\n// https://api-dashboard.atherlabs.xyz/api/sipher/loyalty/uri/erc721/INU/123\n\n{\n  "name": "Sipher INU #8234",\n  "attributes": [\n    {\n      "trait_type": "background",\n      "value": "blue smoke"\n    },\n    {\n      "trait_type": "costume",\n      "value": "sheriff jacket"\n    },\n    {\n      "trait_type": "eye color",\n      "value": "green"\n    },\n    {\n      "trait_type": "fur color",\n      "value": "brown"\n    },\n    {\n      "trait_type": "hand",\n      "value": "spike glove"\n    },\n    {\n      "trait_type": "mask",\n      "value": "gas mask"\n    },\n    {\n      "trait_type": "secondary background color",\n      "value": "pink"\n    },\n    {\n      "trait_type": "sub-race",\n      "value": "Canis"\n    },\n    {\n      "trait_type": "weapon",\n      "value": "metal pipe"\n    }\n  ],\n  "description": "",\n  "external_url": "https://playsipher.com",\n  "image": "https://sipherstorage.s3.ap-southeast-1.amazonaws.com/imgs/shiba_008234_mask.png"\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To implement this, override the ",(0,o.jsx)(n.code,{children:"_baseURI()"})," function to return your API URL. In this example, we override it to return the ",(0,o.jsx)(n.code,{children:"baseURI"})," variable:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function _baseURI() internal view override returns (string memory) {\n    return baseURI;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can set your ",(0,o.jsx)(n.code,{children:"baseURI"})," in the constructor or create a ",(0,o.jsx)(n.code,{children:"setBaseURI()"})," function for easy updates:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function setBaseURI(string calldata _uri) external onlyRole(MANAGER_ROLE) {\n    baseURI = _uri;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["With this setup, the OpenZeppelin library's ",(0,o.jsx)(n.code,{children:"tokenURI()"})," function will automatically combine your API URL with the input tokenId, creating a complete API call:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n    _requireOwned(tokenId);\n\n    string memory baseURI = _baseURI();\n    return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : "";\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"By managing your API's output, you can provide unique metadata for each NFT tokenId."}),"\n",(0,o.jsxs)(n.h2,{id:"onchain-metadata",children:["Onchain Metadata",(0,o.jsx)(n.a,{href:"#onchain-metadata"})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Skip this section if you've already implemented your metadata off-chain."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Instead of referencing a ",(0,o.jsx)(n.code,{children:"json"})," file hosted on a traditional web server, you can store your metadata directly in the contract. To implement this, first import these helper libraries:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'import "@openzeppelin/contracts/utils/Base64.sol";\nimport "@openzeppelin/contracts/utils/Strings.sol";\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then, ",(0,o.jsx)(n.code,{children:"override"})," the ",(0,o.jsx)(n.code,{children:"_baseURI"})," and ",(0,o.jsx)(n.code,{children:"tokenURI"})," functions to return Base64-encoded JSON metadata containing the relevant information:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'function _baseURI() internal pure override returns (string memory) {\n  return "data:application/json;base64,";\n}\n\nfunction tokenURI(uint _tokenId) public view override returns (string memory) {\n  if(_tokenId > counter) {\n    revert InvalidTokenId(_tokenId);\n  }\n\n  string memory json = Base64.encode(\n    bytes(\n      string(\n        abi.encodePacked(\n        \'{"name": "\',\n        name(),\n        \' #: \',\n        Strings.toString(_tokenId),\n        \'","description": "Random colors are pretty or boring!", "image": "image": "data:image/svg+xml;base64,\',\n        // TODO...,\n        \'"}\'\n        )\n      )\n    )\n  );\n\n  return string(abi.encodePacked(_baseURI(), json));\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Exercise extreme caution"})," when setting up the single and double quotes above. Always test this function thoroughly to ensure it produces valid JSON metadata. A single error here can break the NFT, preventing it from displaying correctly in wallets or marketplaces!"]}),"\n",(0,o.jsx)(n.h3,{id:"onchain-svg-image",children:"Onchain SVG Image"}),"\n",(0,o.jsx)(n.p,{children:"The NFT's art will feature a simple SVG containing a square with a pseudo-randomly chosen color, all stored directly on the blockchain."}),"\n",(0,o.jsxs)(n.p,{children:["Let's start by creating a ",(0,o.jsx)(n.code,{children:"render"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function render(uint _tokenId) public view returns (string memory) {\n  return string(\n    abi.encodePacked(\n      \"&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1024 1024'&gt;\",\n        // TODO: add a rectangle with a random color fill\n      \"&lt;/svg&gt;\"\n    )\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In SVG, rectangles are created using the [rect] element. To fill the entire background, set the width and height to match the ",(0,o.jsx)(n.code,{children:"viewbox"})," dimensions. While not explicitly mentioned in the MDN documentation for rectangles, you can use the ",(0,o.jsx)(n.code,{children:"fill"})," property to add color to any SVG element. Color can be specified using names or hex codes:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<rect width="100" height="100" fill="#aabbcc" />\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"generating-a-random-color",children:"Generating a Random Color"}),"\n",(0,o.jsx)(n.p,{children:"Instead of a fixed color, your design requires a unique color for each NFT. Add a function to generate this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"// Function to generate a random color hex code\nfunction generateRandomColor() public view returns (string memory) {\n  // Generate a pseudo-random number using block.prevrandao\n  uint256 randomNum = uint256(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, msg.sender)));\n\n  // Extract RGB components from the random number\n  bytes memory colorBytes = new bytes(3);\n  colorBytes[0] = bytes1(uint8(randomNum >> 16));\n  colorBytes[1] = bytes1(uint8(randomNum >> 8));\n  colorBytes[2] = bytes1(uint8(randomNum));\n\n  // Convert RGB components to hex string\n  string memory colorHex = string(abi.encodePacked(\n    \"#\",\n    toHexDigit(uint8(colorBytes[0]) >> 4),\n    toHexDigit(uint8(colorBytes[0]) & 0x0f),\n    toHexDigit(uint8(colorBytes[1]) >> 4),\n    toHexDigit(uint8(colorBytes[1]) & 0x0f),\n    toHexDigit(uint8(colorBytes[2]) >> 4),\n    toHexDigit(uint8(colorBytes[2]) & 0x0f)\n  ));\n\n  return colorHex;\n}\n\n// Helper function to convert a uint8 to a hex character\nfunction toHexDigit(uint8 d) internal pure returns (bytes1) {\n  if (d < 10) {\n    return bytes1(uint8(bytes1('0')) + d);\n  } else {\n    return bytes1(uint8(bytes1('a')) + d - 10);\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Caution: Randomness generated using on-chain information isn't fully secure. A determined attacker could manipulate a block to compromise your contract. That said, ",(0,o.jsx)(n.code,{children:"prevrandao"})," is a passable solution for non-high-stakes applications."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"saving-the-color-to-the-nft",children:"Saving the Color to the NFT"}),"\n",(0,o.jsxs)(n.p,{children:["To associate each NFT with its generated color, you'll need to store this information for retrieval when the ",(0,o.jsx)(n.code,{children:"tokenURI"})," function is called. Add a mapping to establish this relationship:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"mapping (uint => string) public tokenIdToColor;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then, set the color during the minting process:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function mintTo(address _to) public {\n    counter++;\n    _safeMint(_to, counter);\n    tokenIdToColor[counter] = generateRandomColor();\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"completing-the-tokenuri-function",children:["Completing the ",(0,o.jsx)(n.code,{children:"tokenURI"})," Function"]}),"\n",(0,o.jsxs)(n.p,{children:["Update your ",(0,o.jsx)(n.code,{children:"render"})," function to generate the SVG:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function render(uint _tokenId) public view returns (string memory) {\n    return string(\n        abi.encodePacked(\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1024 1024'>\",\n            \"<rect width='1024' height='1024' fill='\",\n            tokenIdToColor[_tokenId],\n            \"' />\",\n            \"</svg>\"\n        )\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Finally, modify your ",(0,o.jsx)(n.code,{children:"tokenURI"})," function to incorporate the SVG and return it as base64-encoded data:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'function tokenURI(uint _tokenId) public view override returns (string memory) {\n  if(_tokenId > counter) {\n    revert InvalidTokenId(_tokenId);\n  }\n\n  string memory json = Base64.encode(\n    bytes(\n      string(\n        abi.encodePacked(\n        \'{"name": "\',\n        name(),\n        \' #: \',\n        Strings.toString(_tokenId),\n        \'","description": "Random colors are pretty or boring!", "image": "data:image/svg+xml;base64,\',\n        Base64.encode(bytes(render(_tokenId))),\n        \'"}\'\n        )\n      )\n    )\n  );\n\n  return string(abi.encodePacked(_baseURI(), json));\n}\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"list-of-nfts-owned",children:"List of NFTs Owned"}),"\n",(0,o.jsx)(n.p,{children:"Standard ERC-721 contracts don't provide a built-in way to list all NFTs owned by an address. This is due to gas costs, as the data is typically accessed through off-chain services."}),"\n",(0,o.jsx)(n.p,{children:"However, recent gas price reductions make on-contract ownership tracking more feasible, potentially reducing reliance on external APIs."}),"\n",(0,o.jsxs)(n.p,{children:["To track ownership in-contract, start by importing ",(0,o.jsx)(n.code,{children:"EnumerableSet"})," from OpenZeppelin:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:'import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Next, enable it for ",(0,o.jsx)(n.code,{children:"uint"})," sets and add a mapping to link ",(0,o.jsx)(n.code,{children:"addresses"})," to token IDs:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"// Inside the RandomColorNFT contract\nusing EnumerableSet for EnumerableSet.UintSet;\n\nmapping (address => EnumerableSet.UintSet) tokensOwned;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Lastly, use the ",(0,o.jsx)(n.code,{children:"_update"})," function to handle ownership changes, including minting:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function _update(address to, uint256 tokenId, address auth) internal override(ERC721) returns(address) {\n  // Only remove the token if it is not being minted\n  if (tokenId != counter){\n    tokensOwned[auth].remove(tokenId);\n  }\n  tokensOwned[to].add(tokenId);\n\n  return super._update(to, tokenId, auth);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["With this list of NFTs owned by an address, you can now create a function to retrieve them all. Include the JSON metadata for each token to get the complete list of NFTs ",(0,o.jsx)(n.strong,{children:"and"})," their metadata in a single RPC call!"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function getNFftsOwned(address owner) public view returns (TokenAndMetatdata[] memory) {\n  TokenAndMetatdata[] memory tokens = new TokenAndMetatdata[](tokensOwned[owner].length());\n  for (uint i = 0; i < tokensOwned[owner].length(); i++) {\n    uint tokenId = tokensOwned[owner].at(i);\n    tokens[i] = TokenAndMetatdata(tokenId, tokenURI(tokenId));\n  }\n  return tokens;\n}\n\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"testing",children:["Testing",(0,o.jsx)(n.a,{href:"#testing"})]}),"\n",(0,o.jsx)(n.p,{children:"Test your contract locally, then deploy and verify it. Ensure proper formatting of JSON metadata and SVG image. To confirm functionality, check the collection on a testnet NFT marketplace."}),"\n",(0,o.jsxs)(n.p,{children:["Note: Collection registration may take a few minutes. If display issues occur, use a blockchain explorer to retrieve the ",(0,o.jsx)(n.code,{children:"tokenURI"}),", then decode the base64 data to inspect the metadata and image."]}),"\n",(0,o.jsx)(n.h2,{id:"deploy-contract",children:"Deploy Contract"}),"\n",(0,o.jsx)(n.p,{children:"To deploy the contract, you can refer to our tutorials that suit your preferred tech stack:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Deploying a smart contract using Foundry"}),"\n",(0,o.jsx)(n.li,{children:"Deploying a smart contract using Hardhat"}),"\n",(0,o.jsx)(n.li,{children:"Deploying a smart contract using Remix"}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"conclusion",children:["Conclusion",(0,o.jsx)(n.a,{href:"#conclusion"})]}),"\n",(0,o.jsx)(n.p,{children:"This tutorial has equipped you with the skills to create a simple yet powerful NFT (Non-Fungible Token) with both off-chain and on-chain metadata. You've learned to generate and return JSON metadata for ERC-721 tokens programmatically, craft unique SVG art deterministically within a smart contract, and produce pseudorandom numbers for color generation. This knowledge forms a solid foundation for developing more sophisticated NFT projects and understanding the intricacies of on-chain data storage in blockchain applications."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},294:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/tokenURI-config-14f01069e17abeb932fa2e5ef43c108a.png"},1184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(4041);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);