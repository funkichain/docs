"use strict";(self.webpackChunk_funki_docs_frontend=self.webpackChunk_funki_docs_frontend||[]).push([[979],{298:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorials/connect-metamask","title":"Connect Metamask","description":"","source":"@site/docs/tutorials/connect-metamask.md","sourceDirName":"tutorials","slug":"/tutorials/connect-metamask","permalink":"/docs/tutorials/connect-metamask","draft":false,"unlisted":false,"editUrl":"https://github.com/funkichain/docs/edit/main/packages/frontend/docs/tutorials/connect-metamask.md","tags":[],"version":"current","lastUpdatedAt":1734445511000,"frontMatter":{"title":"Connect Metamask","slug":"/tutorials/connect-metamask","order":5.1,"description":""},"sidebar":"docSidebar","previous":{"title":"Interact with Standard Bridge","permalink":"/docs/tutorials/interact-with-standard-bridge"},"next":{"title":"Connect WalletConnect via AppKit","permalink":"/docs/tutorials/connect-walletconnect-appkit"}}');var s=t(1085),o=t(1184);const i={title:"Connect Metamask",slug:"/tutorials/connect-metamask",order:5.1,description:""},c="Connect to MetaMask using third-party libraries",a={},d=[{value:"Vanilla TypeScript",id:"vanilla-typescript",level:2},{value:"<strong>1. Create a project</strong>",id:"1-create-a-project",level:3},{value:"<strong>2. Set up the project</strong>",id:"2-set-up-the-project",level:3},{value:"<strong>3. Update <code>main.ts</code></strong>",id:"3-update-maints",level:3},{value:"<strong>4. Connect to wallets</strong>",id:"4-connect-to-wallets",level:3},{value:"<strong>5. View the project</strong>",id:"5-view-the-project",level:3},{value:"<strong>Example</strong>",id:"example",level:3},{value:"<strong>React TypeScript</strong>",id:"react-typescript",level:2},{value:"<strong>1. Create a project</strong>",id:"1-create-a-project-1",level:3},{value:"<strong>2. Set up the project</strong>",id:"2-set-up-the-project-1",level:3},{value:"3. <strong>Update <code>App.tsx</code></strong>",id:"3-update-apptsx",level:3},{value:"4. <strong>Detect and connect to wallets</strong>",id:"4-detect-and-connect-to-wallets",level:3},{value:"<strong>5. Add React hooks</strong>",id:"5-add-react-hooks",level:3},{value:"<strong>6. Create utility functions</strong>",id:"6-create-utility-functions",level:3},{value:"<strong>Example</strong>",id:"example-1",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"You can connect your dapp to users' MetaMask wallets by detecting MetaMask in their browsers and establishing a connection to their accounts. This page explains how to connect to MetaMask using the wallet detection mechanism introduced by EIP-6963. This approach enables you to detect multiple installed wallets and connect to them without conflicts."}),"\n",(0,s.jsx)(n.p,{children:"There are two main methods to connect to MetaMask: using third-party libraries or directly using Vite."}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"connect-to-metamask-using-third-party-libraries",children:(0,s.jsx)(n.strong,{children:"Connect to MetaMask using third-party libraries"})})}),"\n",(0,s.jsx)(n.p,{children:"You can connect to MetaMask using the following third-party libraries that support EIP-6963:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://wagmi.sh/",children:"Wagmi 2+"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.walletconnect.com/web3modal/about",children:"Web3Modal 3+"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/wevm/mipd",children:"MIPD Store"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.rainbowkit.com/",children:"RainbowKit"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://onboard.blocknative.com/",children:"Web3-Onboard"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.family.co/connectkit",children:"ConnectKit"})}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"connect-to-metamask-directly-using-vite",children:(0,s.jsx)(n.strong,{children:"Connect to MetaMask directly using Vite"})}),"\n",(0,s.jsx)(n.p,{children:"To connect to MetaMask directly, we recommend implementing support for EIP-6963 using the Vite build tool with either vanilla TypeScript or React TypeScript."}),"\n",(0,s.jsx)(n.h2,{id:"vanilla-typescript",children:"Vanilla TypeScript"}),"\n",(0,s.jsx)(n.p,{children:"Follow these steps to create a vanilla TypeScript project that connects to MetaMask:"}),"\n",(0,s.jsx)(n.h3,{id:"1-create-a-project",children:(0,s.jsx)(n.strong,{children:"1. Create a project"})}),"\n",(0,s.jsx)(n.p,{children:"Set up a Vite project using the vanilla TypeScript template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"npm create vite@latest vanilla-ts-6963 -- --template vanilla-ts\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-set-up-the-project",children:(0,s.jsx)(n.strong,{children:"2. Set up the project"})}),"\n",(0,s.jsxs)(n.p,{children:["In your Vite project, update ",(0,s.jsx)(n.code,{children:"src/vite-env.d.ts"})," with the EIP-6963 interfaces:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'/// <reference types="vite/client" />\n\ninterface EIP6963ProviderInfo {\n  rdns: string\n  uuid: string\n  name: string\n  icon: string\n}\n\ninterface EIP6963ProviderDetail {\n  info: EIP6963ProviderInfo\n  provider: EIP1193Provider\n}\n\ntype EIP6963AnnounceProviderEvent = {\n  detail: {\n    info: EIP6963ProviderInfo\n    provider: Readonly<EIP1193Provider>\n  }\n}\n\ninterface EIP1193Provider {\n  isStatus?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (\n    request: { method: string; params?: Array<unknown> },\n    callback: (error: Error | null, response: unknown) => void\n  ) => void\n  send?: (\n    request: { method: string; params?: Array<unknown> },\n    callback: (error: Error | null, response: unknown) => void\n  ) => void\n  request: (request: {\n    method: string\n    params?: Array<unknown>\n  }) => Promise<unknown>\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note:\nIn addition to the EIP-6963 interfaces, you need an ",(0,s.jsx)(n.code,{children:"EIP1193Provider"})," interface (defined by\n",(0,s.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:"EIP-1193"}),"). This interface is the foundational structure for\nEthereum wallet providers and represents the essential properties and methods for interacting with\nMetaMask and other Ethereum wallets in JavaScript."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-update-maints",children:(0,s.jsxs)(n.strong,{children:["3. Update ",(0,s.jsx)(n.code,{children:"main.ts"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Update ",(0,s.jsx)(n.code,{children:"src/main.ts"})," with the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import "./style.css"\nimport { listProviders } from "./providers.ts"\n\ndocument.querySelector<HTMLDivElement>("#app")!.innerHTML = `\n  <div>\n    <div id="providerButtons"></div>\n  </div>\n`\n\nlistProviders(document.querySelector<HTMLDivElement>("#providerButtons")!)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"querySelector"})," finds and returns the first HTML element that matches the CSS selector ",(0,s.jsx)(n.code,{children:"#app"}),", and sets its ",(0,s.jsx)(n.code,{children:"innerHTML"}),". Include a basic HTML structure with an inner ",(0,s.jsx)(n.code,{children:"div"})," to inject a list of buttons, each representing a detected wallet provider."]}),"\n",(0,s.jsxs)(n.p,{children:["You'll create the ",(0,s.jsx)(n.code,{children:"listProviders"})," function in the next step, passing an argument that represents the ",(0,s.jsx)(n.code,{children:"div"})," element."]}),"\n",(0,s.jsx)(n.h3,{id:"4-connect-to-wallets",children:(0,s.jsx)(n.strong,{children:"4. Connect to wallets"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a file ",(0,s.jsx)(n.code,{children:"src/providers.ts"})," with the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'declare global {\n  interface WindowEventMap {\n    "eip6963:announceProvider": CustomEvent\n  }\n}\n\n// Connect to the selected provider using eth_requestAccounts.\nconst connectWithProvider = async (\n  wallet: EIP6963AnnounceProviderEvent["detail"]\n) => {\n  try {\n    await wallet.provider.request({ method: "eth_requestAccounts" })\n  } catch (error) {\n    console.error("Failed to connect to provider:", error)\n  }\n}\n\n// Display detected providers as connect buttons.\nexport function listProviders(element: HTMLDivElement) {\n  window.addEventListener(\n    "eip6963:announceProvider",\n    (event: EIP6963AnnounceProviderEvent) => {\n      const button = document.createElement("button")\n\n      button.innerHTML = `\n        <img src="${event.detail.info.icon}" alt="${event.detail.info.name}" />\n        <div>${event.detail.info.name}</div>\n      `\n\n      // Call connectWithProvider when a user selects the button.\n      button.onclick = () => connectWithProvider(event.detail)\n      element.appendChild(button)\n    }\n  )\n\n  // Notify event listeners and other parts of the dapp that a provider is requested.\n  window.dispatchEvent(new Event("eip6963:requestProvider"))\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"connectWithProvider"})," function connects the user to the selected provider using ",(0,s.jsx)(n.code,{children:"eth_requestAccounts"}),". It takes a ",(0,s.jsx)(n.code,{children:"wallet"})," object as an argument, which is of type ",(0,s.jsx)(n.code,{children:'EIP6963AnnounceProviderEvent["detail"]'}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"listProviders"})," function uses a streamlined approach. It directly passes the ",(0,s.jsx)(n.code,{children:"event.detail"})," object to the ",(0,s.jsx)(n.code,{children:"connectWithProvider"})," function when a provider is announced, rather than mapping and joining an entire block of HTML."]}),"\n",(0,s.jsx)(n.h3,{id:"5-view-the-project",children:(0,s.jsx)(n.strong,{children:"5. View the project"})}),"\n",(0,s.jsx)(n.p,{children:"Run the following command to view and test the Vite project in your browser:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"npm run dev\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example",children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsxs)(n.p,{children:["For more information, check out the ",(0,s.jsx)(n.a,{href:"https://github.com/MetaMask/vite-vanilla-ts-eip-6963",children:"vanilla TypeScript example"}),". You can clone the repository and run the example locally using ",(0,s.jsx)(n.code,{children:"npm i && npm run dev"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"react-typescript",children:(0,s.jsx)(n.strong,{children:"React TypeScript"})}),"\n",(0,s.jsx)(n.p,{children:"Follow these steps for creating a React TypeScript project to connect to MetaMask:"}),"\n",(0,s.jsx)(n.h3,{id:"1-create-a-project-1",children:(0,s.jsx)(n.strong,{children:"1. Create a project"})}),"\n",(0,s.jsx)(n.p,{children:"Create a Vite project using the template for React TypeScript:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"npm create vite@latest react-ts-6963 -- --template react-ts\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-set-up-the-project-1",children:(0,s.jsx)(n.strong,{children:"2. Set up the project"})}),"\n",(0,s.jsxs)(n.p,{children:["In your Vite project, update ",(0,s.jsx)(n.code,{children:"src/vite-env.d.ts"})," with the EIP-6963 interfaces:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'/// <reference types="vite/client" />\n\ninterface EIP6963ProviderInfo {\n  rdns: string\n  uuid: string\n  name: string\n  icon: string\n}\n\ninterface EIP6963ProviderDetail {\n  info: EIP6963ProviderInfo\n  provider: EIP1193Provider\n}\n\ntype EIP6963AnnounceProviderEvent = {\n  detail: {\n    info: EIP6963ProviderInfo\n    provider: Readonly<EIP1193Provider>\n  }\n}\n\ninterface EIP1193Provider {\n  isStatus?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (\n    request: { method: string; params?: Array<unknown> },\n    callback: (error: Error | null, response: unknown) => void\n  ) => void\n  send?: (\n    request: { method: string; params?: Array<unknown> },\n    callback: (error: Error | null, response: unknown) => void\n  ) => void\n  request: (request: {\n    method: string\n    params?: Array<unknown>\n  }) => Promise<unknown>\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note:\nIn addition to the EIP-6963 interfaces, you need a ",(0,s.jsx)(n.code,{children:"EIP1193Provider"})," interface (defined by\n",(0,s.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:"EIP-1193"}),"), which is the foundational structure for Ethereum wallet providers, and represents the essential properties and methods for interacting with MetaMask and other Ethereum wallets in JavaScript."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-update-apptsx",children:["3. ",(0,s.jsxs)(n.strong,{children:["Update ",(0,s.jsx)(n.code,{children:"App.tsx"})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Update ",(0,s.jsx)(n.code,{children:"src/App.tsx"})," with the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import "./App.css"\nimport { DiscoverWalletProviders } from "./components/DiscoverWalletProviders"\n\nfunction App() {\n  return (\n    <DiscoverWalletProviders/>\n  )\n}\n\nexport default App\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This code renders the ",(0,s.jsx)(n.code,{children:"DiscoverWalletProviders"})," component that you'll create in the next step, which contains the logic for detecting and connecting to wallet providers."]}),"\n",(0,s.jsxs)(n.h3,{id:"4-detect-and-connect-to-wallets",children:["4. ",(0,s.jsx)(n.strong,{children:"Detect and connect to wallets"})]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"src/components"})," directory, create a component ",(0,s.jsx)(n.code,{children:"DiscoverWalletProviders.tsx"})," with the\nfollowing code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useState } from "react"\nimport { useSyncProviders } from "../hooks/useSyncProviders"\nimport { formatAddress } from "~/utils"\n\nexport const DiscoverWalletProviders = () => {\n  const [selectedWallet, setSelectedWallet] = useState<EIP6963ProviderDetail>()\n  const [userAccount, setUserAccount] = useState<string>("")\n  const providers = useSyncProviders()\n\n  // Connect to the selected provider using eth_requestAccounts.\n  const handleConnect = async (providerWithInfo: EIP6963ProviderDetail) => {\n    try {\n      const accounts = await providerWithInfo.provider.request({\n        method: "eth_requestAccounts"\n      })\n\n      setSelectedWallet(providerWithInfo)\n      setUserAccount(accounts?.[0])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // Display detected providers as connect buttons.\n  return (\n    <>\n      <h2>Wallets Detected:</h2>\n      <div>\n        {\n          providers.length > 0 ? providers?.map((provider: EIP6963ProviderDetail) => (\n            <button key={provider.info.uuid} onClick={() => handleConnect(provider)} >\n              <img src={provider.info.icon} alt={provider.info.name} />\n              <div>{provider.info.name}</div>\n            </button>\n          )) :\n            <div>\n              No Announced Wallet Providers\n            </div>\n        }\n      </div>\n      <hr />\n      <h2>{userAccount ? "" : "No "}Wallet Selected</h2>\n      {userAccount &&\n        <div>\n          <div>\n            <img src={selectedWallet.info.icon} alt={selectedWallet.info.name} />\n            <div>{selectedWallet.info.name}</div>\n            <div>({formatAddress(userAccount)})</div>\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"selectedWallet"})," is a state variable that holds the user's most recently selected wallet."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"userAccount"})," is a state variable that holds the user's connected wallet's address."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useSyncProviders"})," is a custom hook that returns the providers array (wallets installed in the browser)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"handleConnect"})," function takes a ",(0,s.jsx)(n.code,{children:"providerWithInfo"}),", which is an ",(0,s.jsx)(n.code,{children:"EIP6963ProviderDetail"})," object.\nThat object is used to request the user's accounts from the provider using ",(0,s.jsx)(n.code,{children:"eth_requestAccounts"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If the request succeeds, the ",(0,s.jsx)(n.code,{children:"selectedWallet"})," and ",(0,s.jsx)(n.code,{children:"userAccount"})," local state variables are set."]}),"\n",(0,s.jsx)(n.p,{children:"Then, the component maps over the providers array and renders a button for each detected provider."}),"\n",(0,s.jsxs)(n.p,{children:["Finally, if the ",(0,s.jsx)(n.code,{children:"userAccount"})," state variable is not empty, the selected wallet icon, name, and\naddress are displayed."]}),"\n",(0,s.jsx)(n.h3,{id:"5-add-react-hooks",children:(0,s.jsx)(n.strong,{children:"5. Add React hooks"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"src/hooks"})," directory and add a ",(0,s.jsx)(n.code,{children:"store.ts"})," file with the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'declare global {\n  interface WindowEventMap {\n    "eip6963:announceProvider": CustomEvent\n  }\n}\n\n// An array to store the detected wallet providers.\nlet providers: EIP6963ProviderDetail[] = []\n\nexport const store = {\n  value: () => providers,\n  subscribe: (callback: () => void) => {\n    function onAnnouncement(event: EIP6963AnnounceProviderEvent) {\n      if (providers.map((p) => p.info.uuid).includes(event.detail.info.uuid))\n        return\n      providers = [...providers, event.detail]\n      callback()\n    }\n\n    // Listen for eip6963:announceProvider and call onAnnouncement when the event is triggered.\n    window.addEventListener("eip6963:announceProvider", onAnnouncement)\n\n    // Dispatch the event, which triggers the event listener in the MetaMask wallet.\n    window.dispatchEvent(new Event("eip6963:requestProvider"))\n\n    // Return a function that removes the event listern.\n    return () =>\n      window.removeEventListener("eip6963:announceProvider", onAnnouncement)\n  },\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Also, add a file ",(0,s.jsx)(n.code,{children:"useSyncProviders.ts"})," with the following code to the ",(0,s.jsx)(n.code,{children:"hooks"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useSyncExternalStore } from "react"\nimport { store } from "./store"\n\nexport const useSyncProviders = () =>\n  useSyncExternalStore(store.subscribe, store.value, store.value)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This hook allows you to subscribe to MetaMask events, read updated values, and update components. It uses the ",(0,s.jsx)(n.code,{children:"store.value"})," and ",(0,s.jsx)(n.code,{children:"store.subscribe"})," methods defined in the ",(0,s.jsx)(n.code,{children:"store.ts"})," hook."]}),"\n",(0,s.jsx)(n.h3,{id:"6-create-utility-functions",children:(0,s.jsx)(n.strong,{children:"6. Create utility functions"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"src/utils"})," directory and add a file ",(0,s.jsx)(n.code,{children:"index.ts"})," with the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"export const formatBalance = (rawBalance: string) => {\n  const balance = (parseInt(rawBalance) / 1000000000000000000).toFixed(2)\n  return balance\n}\n\nexport const formatChainAsNum = (chainIdHex: string) => {\n  const chainIdNum = parseInt(chainIdHex)\n  return chainIdNum\n}\n\nexport const formatAddress = (addr: string) => {\n  const upperAfterLastTwo = addr.slice(0, 2) + addr.slice(2)\n  return `${upperAfterLastTwo.substring(0, 5)}...${upperAfterLastTwo.substring(39)}`\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This directory is ideal for storing utility functions that you may need to reuse throughout your dapp. While this example only utilizes the ",(0,s.jsx)(n.code,{children:"formatAddress"})," function, the others could prove useful for various applications."]}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsxs)(n.p,{children:["For a more comprehensive look, check out the ",(0,s.jsx)(n.a,{href:"https://github.com/MetaMask/vite-react-ts-eip-6963",children:"React TypeScript example"}),". You can clone the repository and run the example locally by executing ",(0,s.jsx)(n.code,{children:"npm i && npm run dev"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(4041);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);