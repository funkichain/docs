"use strict";(self.webpackChunk_funki_docs_frontend=self.webpackChunk_funki_docs_frontend||[]).push([[3342],{8697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorials/connect-walletconnect-appkit","title":"Connect WalletConnect via AppKit","description":"","source":"@site/docs/tutorials/connect-walletconnect-appkit.md","sourceDirName":"tutorials","slug":"/tutorials/connect-walletconnect-appkit","permalink":"/docs/tutorials/connect-walletconnect-appkit","draft":false,"unlisted":false,"editUrl":"https://github.com/funkichain/docs/edit/main/packages/frontend/docs/tutorials/connect-walletconnect-appkit.md","tags":[],"version":"current","lastUpdatedAt":1734445511000,"frontMatter":{"title":"Connect WalletConnect via AppKit","slug":"/tutorials/connect-walletconnect-appkit","order":5.11,"description":""},"sidebar":"docSidebar","previous":{"title":"Connect Metamask","permalink":"/docs/tutorials/connect-metamask"},"next":{"title":"Block Explorers","permalink":"/docs/tools/block-explorers"}}');var a=t(1085),i=t(1184);const s={title:"Connect WalletConnect via AppKit",slug:"/tutorials/connect-walletconnect-appkit",order:5.11,description:""},r="Get Started",l={},c=[{value:"React",id:"react",level:2},{value:"<strong>Installation</strong>",id:"installation",level:3},{value:"<strong>Cloud Configuration</strong>",id:"cloud-configuration",level:3},{value:"<strong>Implementation</strong>",id:"implementation",level:3},{value:"<strong>Trigger the modal</strong>",id:"trigger-the-modal",level:3},{value:"<strong>Smart Contract Interaction</strong>",id:"smart-contract-interaction",level:3},{value:"Android",id:"android",level:2},{value:"<strong>Requirements</strong>",id:"requirements",level:3},{value:"<strong>Installation</strong>",id:"installation-1",level:3},{value:"Implementation",id:"implementation-1",level:3},{value:"Usage",id:"usage",level:3},{value:"iOS",id:"ios",level:2},{value:"Installation",id:"installation-2",level:3},{value:"Usage",id:"usage-1",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"AppKit offers a comprehensive feature stack, from onboarding to transactions and messaging, enabling apps to create robust, long-lasting web3 experiences through a single, seamless integration."}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"get-started",children:(0,a.jsx)(n.strong,{children:"Get Started"})})}),"\n",(0,a.jsx)(n.h2,{id:"react",children:"React"}),"\n",(0,a.jsx)(n.p,{children:"AppKit supports Wagmi and Ethers v6 on Ethereum. Choose one of these Ethereum libraries to begin."}),"\n",(0,a.jsx)(n.h3,{id:"installation",children:(0,a.jsx)(n.strong,{children:"Installation"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"yarn add @web3modal/wagmi wagmi viem @tanstack/react-query\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cloud-configuration",children:(0,a.jsx)(n.strong,{children:"Cloud Configuration"})}),"\n",(0,a.jsxs)(n.p,{children:["Create a new project on WalletConnect Cloud at ",(0,a.jsx)(n.a,{href:"https://cloud.walletconnect.com/",children:"https://cloud.walletconnect.com"})," and obtain your project ID."]}),"\n",(0,a.jsx)(n.h3,{id:"implementation",children:(0,a.jsx)(n.strong,{children:"Implementation"})}),"\n",(0,a.jsxs)(n.p,{children:["For quick integration, use the ",(0,a.jsx)(n.code,{children:"defaultWagmiConfig"})," function, which wraps Wagmi's ",(0,a.jsx)(n.a,{href:"https://wagmi.sh/core/api/createConfig",children:(0,a.jsx)(n.code,{children:"createConfig"})})," function with a predefined setup. This includes WalletConnect, Coinbase, and Injected connectors, as well as the ",(0,a.jsx)(n.a,{href:"https://docs.walletconnect.com/cloud/blockchain-api",children:"Blockchain API"})," as a ",(0,a.jsx)(n.a,{href:"https://wagmi.sh/core/api/createConfig#transports",children:"transport"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Set up the following configuration at the top of your app, ensuring all functions are called ",(0,a.jsx)(n.strong,{children:"outside"})," any React component to prevent unwanted rerenders."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createWeb3Modal } from '@web3modal/wagmi/react'\nimport { defaultWagmiConfig } from '@web3modal/wagmi/react/config'\n\nimport { WagmiProvider } from 'wagmi'\nimport { arbitrum, mainnet } from 'wagmi/chains'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\n// 0. Setup queryClient\nconst queryClient = new QueryClient()\n\n// 1. Get projectId from https://cloud.walletconnect.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Create wagmiConfig\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://web3modal.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/37784886']\n}\n\nconst chains = [mainnet, arbitrum] as const\nconst config = defaultWagmiConfig({\n  chains,\n  projectId,\n  metadata,\n})\n\n// 3. Create modal\ncreateWeb3Modal({\n  metadata,\n  wagmiConfig: config,\n  projectId,\n  enableAnalytics: true // Optional - defaults to your Cloud configuration\n})\n\nexport function AppKitProvider({ children }) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"trigger-the-modal",children:(0,a.jsx)(n.strong,{children:"Trigger the modal"})}),"\n",(0,a.jsxs)(n.p,{children:["To open AppKit, you can use our ",(0,a.jsx)(n.a,{href:"https://docs.walletconnect.com/appkit/react/core/components",children:(0,a.jsx)(n.strong,{children:"web component"})})," or build your own button with AppKit ",(0,a.jsx)(n.a,{href:"https://docs.walletconnect.com/appkit/react/core/hooks#useweb3modal",children:(0,a.jsx)(n.strong,{children:"hooks"})}),". In this example, we'll use the ",(0,a.jsx)(n.code,{children:"&lt;w3m-button&gt;"})," component."]}),"\n",(0,a.jsx)(n.p,{children:"Web components are global HTML elements that don't require importing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"export default function ConnectButton() {\n  return <w3m-button />\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Learn more about the AppKit web components ",(0,a.jsx)(n.a,{href:"https://docs.walletconnect.com/appkit/react/core/components",children:"here"})]})}),"\n",(0,a.jsx)(n.h3,{id:"smart-contract-interaction",children:(0,a.jsx)(n.strong,{children:"Smart Contract Interaction"})}),"\n",(0,a.jsx)(n.p,{children:"Wagmi hooks can help us interact with wallets and smart contracts:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { useReadContract } from 'wagmi'\nimport { USDTAbi } from '../abi/USDTAbi'\n\nconst USDTAddress = '0x...'\n\nfunction App() {\n  const result = useReadContract({\n    abi: USDTAbi,\n    address: USDTAddress,\n    functionName: 'totalSupply'\n  })\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Read more about Wagmi hooks for smart contract interaction ",(0,a.jsx)(n.a,{href:"https://wagmi.sh/react/hooks/useReadContract",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"android",children:"Android"}),"\n",(0,a.jsx)(n.p,{children:"Kotlin implementation of AppKit for Android applications."}),"\n",(0,a.jsx)(n.p,{children:"Android Core"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://img.shields.io/maven-central/v/com.walletconnect/android-core",children:"https://img.shields.io/maven-central/v/com.walletconnect/android-core"})}),"\n",(0,a.jsx)(n.p,{children:"Web3Modal"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://img.shields.io/maven-central/v/com.walletconnect/web3modal",children:"https://img.shields.io/maven-central/v/com.walletconnect/web3modal"})}),"\n",(0,a.jsx)(n.h3,{id:"requirements",children:(0,a.jsx)(n.strong,{children:"Requirements"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Android min SDK 23"}),"\n",(0,a.jsx)(n.li,{children:"Java 11"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"installation-1",children:(0,a.jsx)(n.strong,{children:"Installation"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"root/build.gradle.kts:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'allprojects {\n   repositories {\n      mavenCentral()\n      maven { url "https://jitpack.io" }\n   }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"app/build.gradle.kts"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'implementation(platform("com.walletconnect:android-bom:$BOM_VERSION"))\nimplementation("com.walletconnect:android-core")\nimplementation("com.walletconnect:web3modal")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-1",children:"Implementation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Web3Modal"})," is a singleton that interacts with the WalletConnectModal SDK."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Initialize"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval projectId = "" // Get Project ID at https://cloud.walletconnect.com/\nval appMetaData = Core.Model.AppMetaData(\n    name = "Kotlin.Web3Modal",\n    description = "Kotlin Web3Modal Implementation",\n    url = "kotlin.walletconnect.com",\n    icons = listOf("https://raw.githubusercontent.com/WalletConnect/walletconnect-assets/master/Icon/Gradient/Icon.png"),\n    redirect = "kotlin-web3modal://request"\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)\n\nWeb3Modal.initialize(\n    init = Modal.Params.Init(CoreClient),\n    onSuccess = {\n        // Callback will be called if initialization is successful\n     },\n    onError = { error ->\n        // Error will be thrown if there\'s an issue during initialization\n    }\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Session properties"})}),"\n",(0,a.jsxs)(n.p,{children:["You can define session properties by calling the ",(0,a.jsx)(n.code,{children:"setSessionProperties"})," method on the ",(0,a.jsx)(n.code,{children:"Web3Modal"})," object."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Chains"})}),"\n",(0,a.jsx)(n.p,{children:"This example defines an Ethereum chain. You can specify the chains you want to use, but they must be EVM compatible."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// Example of definition chains: https://github.com/WalletConnect/WalletConnectKotlinV2/blob/master/product/web3modal/src/main/kotlin/com/walletconnect/web3/modal/presets/Web3ModalChainsPresets.kt\n\nWeb3Modal.setChains(Web3ModalChainsPresets.ethChains.values.toList())\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.strong,{children:"IMPORTANT"}),": ",(0,a.jsx)(n.code,{children:"Chains"})," must be set before opening the modal."]})}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.google.accompanist.navigation.material.BottomSheetNavigator\nimport com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi\nimport com.google.accompanist.navigation.material.ModalBottomSheetLayout\nimport com.google.accompanist.navigation.material.bottomSheet\nimport com.walletconnect.web3.modal.ui.web3ModalGraph\n\nsetContent {\n    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)\n    val bottomSheetNavigator = BottomSheetNavigator(modalSheetState)\n    val navController = rememberNavController(bottomSheetNavigator)\n\n    ModalBottomSheetLayout(bottomSheetNavigator = bottomSheetNavigator) {\n        NavHost(\n            navController = navController,\n            startDestination = "home"\n        ) {\n            composable("home") {\n                HomeScreen()\n            }\n            web3ModalGraph(navController)\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.strong,{children:"IMPORTANT"}),": Web3Modal uses accompanist navigation material inside. ",(0,a.jsx)(n.code,{children:"ModalBottomSheetLayout"})," should be imported from ",(0,a.jsx)(n.a,{href:"https://google.github.io/accompanist/navigation-material/",children:"Accompanist Navigation Material"})]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import com.walletconnect.web3.modal.ui.openWeb3Modal\n\nnavController().openWeb3Modal(\n    shouldOpenChooseNetwork = true | false\n    onError = {  }\n)\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"ios",children:"iOS"}),"\n",(0,a.jsx)(n.h3,{id:"installation-2",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Swift Package Manager"})}),"\n",(0,a.jsx)(n.p,{children:"You can add AppKit to your project using Swift Package Manager. Follow these steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Open Xcode"}),"\n",(0,a.jsx)(n.li,{children:"Go to File \u2192 Add Packages"}),"\n",(0,a.jsxs)(n.li,{children:["Paste the GitHub repository URL: ",(0,a.jsx)(n.a,{href:"https://github.com/WalletConnect/web3modal-swift",children:"https://github.com/WalletConnect/web3modal-swift"})]}),"\n",(0,a.jsx)(n.li,{children:'Click "Add Package"'}),"\n",(0,a.jsx)(n.li,{children:"Select the Web3Modal products you want to install in your app"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["Alternative: Add Web3Modal to a ",(0,a.jsx)(n.code,{children:"Package.swift"})," manifest"]})}),"\n",(0,a.jsxs)(n.p,{children:["To integrate via a ",(0,a.jsx)(n.code,{children:"Package.swift"})," manifest instead of Xcode, add Web3Modal to your package's dependencies array:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'dependencies: [\n  .package(\n    name: "Web3Modal",\n    url: "https://github.com/WalletConnectV2/web3modal-swift.git",\n    .upToNextMajor(from: "1.0.13")\n  ),\n\n  // Any other dependencies you have...\n],\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then, in any target that depends on a Web3Modal product, add it to the ",(0,a.jsx)(n.code,{children:"dependencies"}),"\narray of that target:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'.target(\n  name: "MyTargetName",\n  dependencies: [\n    // The product(s) you want (most likely Web3Modal).\n    .product(name: "Web3Modal", package: "Web3Modal"),\n  ]\n),\n'})}),"\n",(0,a.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Configure Networking and Pair Clients"})}),"\n",(0,a.jsx)(n.p,{children:"Before proceeding, ensure you've properly configured the Networking and Pair Clients."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Initialize Web3Modal Client"})}),"\n",(0,a.jsxs)(n.p,{children:["To initialize the client, simply call the ",(0,a.jsx)(n.code,{children:"configure"})," method from the Web3Modal instance wrapper."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'let metadata = AppMetadata(\n    name: "Example Wallet",\n    description: "Wallet description",\n    url: "example.wallet",\n    icons: ["https://avatars.githubusercontent.com/u/37784886"],\n    // Used for the Verify: to opt-out verification ignore this parameter\n    verifyUrl: "verify.walletconnect.com"\n)\n\nWeb3Modal.configure(\n    projectId: PROJECT_ID,\n    metadata: metadata\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:"This example will default to using following namespaces."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'let methods: Set<String> = ["eth_sendTransaction", "personal_sign", "eth_signTypedData"]\nlet events: Set<String> = ["chainChanged", "accountsChanged"]\nlet blockchains: Set<Blockchain> = [Blockchain("eip155:1")!]\nlet namespaces: [String: ProposalNamespace] = [\n    "eip155": ProposalNamespace(\n        chains: blockchains,\n        methods: methods,\n        events: events\n    )\n]\n\nlet defaultSessionParams =  SessionParams(\n                                requiredNamespaces: namespaces,\n                                optionalNamespaces: nil,\n                                sessionProperties: nil\n                            )\n'})}),"\n",(0,a.jsx)(n.p,{children:"IIf you want to customize the session parameters, you can call configure and define your own like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"let metadata = AppMetadata(...)\n\nlet sessionParams = SessionParams(...)\n\nWeb3Modal.configure(\n    projectId: PROJECT_ID,\n    metadata: metadata,\n    sessionParams: sessionParams\n)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Alternatively, you can modify them later using ",(0,a.jsx)(n.code,{children:"Web3Modal.set(sessionParams: SessionParams(...))"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Provided UI components"})}),"\n",(0,a.jsxs)(n.p,{children:["You can now utilize the ",(0,a.jsx)(n.code,{children:"Web3ModalButton"})," or ",(0,a.jsx)(n.code,{children:"Web3ModalNetworkButton"})," components. These components dynamically reflect the Web3Modal client's state, including session status, account address and balance, and the currently selected network. They automatically update when the state changes. For more detailed examples, check out the Sample app's ",(0,a.jsx)(n.a,{href:"https://github.com/WalletConnect/web3modal-swift/blob/develop/Sample/Example/ContentView.swift",children:"ContentView.swift"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Custom UI"})}),"\n",(0,a.jsx)(n.p,{children:"If you want to use a custom UI, you can present the modal by simply calling:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"Web3Modal.present()\n"})}),"\n",(0,a.jsx)(n.p,{children:"This method will traverse the view hierarchy and attempt to present from the topmost controller. It's primarily designed for SwiftUI applications."}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, you can specify the view controller to present from:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"Web3Modal.present(from: viewController)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Subscribe to Web3Modal Publishers"})}),"\n",(0,a.jsx)(n.p,{children:"The following publishers are available for subscription:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"public var sessionPublisher: AnyPublisher<[Session], Never>\npublic var sessionSettlePublisher: AnyPublisher<Session, Never>\npublic var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>\npublic var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>\npublic var sessionResponsePublisher: AnyPublisher<Response, Never>\npublic var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>\npublic var authResponsePublisher: AnyPublisher<(id: RPCID, result: Result<(Session?, [Cacao]), AuthError>), Never>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Sign methods"})}),"\n",(0,a.jsx)(n.p,{children:"Web3Modal internally uses the Sign SDK, and most of its methods are exposed through the Web3Modal interface."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(4041);const a={},i=o.createContext(a);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);